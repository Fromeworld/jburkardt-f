 1 December 2012   4:16:27.847 PM
 
SPARSE_GRID_HW_PRB
  FORTRAN90 version
  Test the SPARSE_GRID_HW library.
 
CCU_TEST:
  Clenshaw Curtis quadrature over [0,1]:
 
   Level   Nodes    Estimate  Error
 
   1         1    0.193334        0.977527E-02
   2         3    0.191473        0.568167E-04
   3         5    0.191462        0.395965E-07
   4         9    0.191462        0.652348E-14
   5        17    0.191462        0.289932E-15
 
GET_SEQ_TEST
  GET_SEQ returns all D-dimensional vectors that sum to NORM.
 
  D =    3
  NORM =    6
 
  The compositions
 
  Col        1       2       3
  Row
 
    1:       4       1       1
    2:       3       2       1
    3:       3       1       2
    4:       2       3       1
    5:       2       2       2
    6:       2       1       3
    7:       1       4       1
    8:       1       3       2
    9:       1       2       3
   10:       1       1       4
 
GQN_TEST:
  Gauss-Hermite quadrature over (-oo,+oo):
 
   Level   Nodes    Estimate  Error
 
   1         1     0.00000         1.00000    
   2         2     1.00000        0.933333    
   3         3     9.00000        0.400000    
   4         4     15.0000        0.473695E-15
   5         5     15.0000         0.00000    
 
GQU_TEST:
  Gauss-Legendre quadrature over [0,1]:
 
   Level   Nodes    Estimate  Error
 
   1         1    0.193334        0.977527E-02
   2         2    0.191455        0.379650E-04
   3         3    0.191462        0.946584E-07
   4         4    0.191462        0.174249E-09
   5         5    0.191462        0.254416E-12
 
KPN_TEST:
  Kronrod-Patterson-Hermite quadrature over (-oo,+oo):
 
   Level   Nodes    Estimate  Error
 
   1         1     0.00000         1.00000    
   2         3     9.00000        0.400000    
   3         3     9.00000        0.400000    
   4         7     15.0000        0.473695E-15
   5         9     15.0000        0.118424E-15
 
KPU_TEST:
  Kronrod-Patterson quadrature over [0,1]:
 
   Level   Nodes    Estimate  Error
 
   1         1    0.193334        0.977527E-02
   2         3    0.191462        0.956087E-07
   3         3    0.191462        0.956087E-07
   4         7    0.191462        0.210222E-08
   5         7    0.191462        0.210222E-08

NWSPGR_SIZE_TEST:
  NWSPGR_SIZE returns the size of a sparse grid, based on either:
  one of the built-in 1D rules, or a family of 1D rules
  supplied by the user.

  Kronrod-Patterson, [0,1], Dim 2, Level 3, Symmetric

  Full              21

  Kronrod-Patterson, (-oo,+oo), Dim 2, Level 3, Symmetric

  Full              21

  Gauss-Legendre, [0,1], Dim 2, Level 3, Symmetric

  Full              14

  Gauss Hermite, (-oo,+oo), [0,1], Dim 2, Level 3, Symmetric

  Full              14

  Clenshaw Curtis, [-1,+1], [0,1], Dim 2, Level 3, Unsymmetric

  Full              25

  Dimension / Level table for Clenshaw Curtis Uncompressed

 Dim:        1       2       3       4       5       6       7       8       9      10
Level
   1         1       1       1       1       1       1       1       1       1       1
   2         3       7      10      13      16      19      22      25      28      31
   3         5      25      52      87     131     184     246     317     397     486
   4         9      67     195     411     746    1228    1884    2741    3826    5166
   5        17     161     609    1573    3376    6430   11222   18319   28369   42101
 
ORDER_REPORT
  For each family of rules, report:
  L,  the level index,
  RP, the required polynomial precision,
  AP, the actual polynomial precision,
  O,  the rule order (number of points).
 
  GQN family
  Gauss quadrature, exponential weight, (-oo,+oo)
 
   L  RP  AP   O
 
   1   1   1   1
   2   3   3   2
   3   5   5   3
   4   7   7   4
   5   9   9   5
   6  11  11   6
   7  13  13   7
   8  15  15   8
   9  17  17   9
  10  19  19  10
  11  21  21  11
  12  23  23  12
  13  25  25  13
  14  27  27  14
  15  29  29  15
  16  31  31  16
  17  33  33  17
  18  35  35  18
  19  37  37  19
  20  39  39  20
  21  41  41  21
  22  43  43  22
  23  45  45  23
  24  47  47  24
  25  49  49  25
 
  GQU family
  Gauss quadrature, unit weight, [0,1]
 
   L  RP  AP   O
 
   1   1   1   1
   2   3   3   2
   3   5   5   3
   4   7   7   4
   5   9   9   5
   6  11  11   6
   7  13  13   7
   8  15  15   8
   9  17  17   9
  10  19  19  10
  11  21  21  11
  12  23  23  12
  13  25  25  13
  14  27  27  14
  15  29  29  15
  16  31  31  16
  17  33  33  17
  18  35  35  18
  19  37  37  19
  20  39  39  20
  21  41  41  21
  22  43  43  22
  23  45  45  23
  24  47  47  24
  25  49  49  25
 
  KPN family
  Gauss-Kronrod-Patterson quadrature, exponential weight, (-oo,+oo)
 
   L  RP  AP   O
 
   1   1   1   1
   2   3   5   3
   3   5   5   3
   4   7   7   7
   5   9  15   9
   6  11  15   9
   7  13  15   9
   8  15  15   9
   9  17  17  17
  10  19  29  19
  11  21  29  19
  12  23  29  19
  13  25  29  19
  14  27  29  19
  15  29  29  19
  16  31  31  31
  17  33  33  33
  18  35  51  35
  19  37  51  35
  20  39  51  35
  21  41  51  35
  22  43  51  35
  23  45  51  35
  24  47  51  35
  25  49  51  35
 
  KPU family
  Gauss-Kronrod-Patterson quadrature, unit weight, [0,1]
 
   L  RP  AP   O
 
   1   1   1   1
   2   3   5   3
   3   5   5   3
   4   7  11   7
   5   9  11   7
   6  11  11   7
   7  13  23  15
   8  15  23  15
   9  17  23  15
  10  19  23  15
  11  21  23  15
  12  23  23  15
  13  25  47  31
  14  27  47  31
  15  29  47  31
  16  31  47  31
  17  33  47  31
  18  35  47  31
  19  37  47  31
  20  39  47  31
  21  41  47  31
  22  43  47  31
  23  45  47  31
  24  47  47  31
  25  49  95  63
 
PACK_RULES_TEST
  Given a sparse grid level K, the code must collect
  the nodes and weights for the 1D rule of levels 1 through K.
 
  RULES_1D_SIZE determines the size of the packed vectors.
  RULES_1D_SET creates the packed vectors.
 
  R1D_SIZE =        6
 
  R1D pointer vector:
 
         1:             1
         2:             2
         3:             4
         4:             7
 
  X vectors
 
    1    0.500000    
    2    0.500000       1.00000    
    3    0.500000      0.853553       1.00000    
 
  W vectors
 
    1     1.00000    
    2    0.666667      0.166667    
    3    0.400000      0.266667      0.333333E-01
 
SYMMETRIC_SPARSE_SIZE_TEST
  Given a symmetric sparse grid rule represented only by
  the points with positive values, determine the total number
  of points in the grid.
 
  For dimension DIM, we report 
  R, the number of points in the positive orthant, and 
  R2, the total number of points.
 
       DIM         R        R2
 
         5         6        11
         5        21        61
         3        23        69
 
TENSOR_PRODUCT_TEST:
  Given a sequence of 1D quadrature rules, construct the
  tensor product rule.
 
  A 1D rule over [-1,+1]:
 
   1    1.000000 * f ( -1.000000 )
   2    1.000000 * f (  1.000000 )
 
  A 2D rule over [-1,+1] x [2.0,3.0]:
 
   1    0.250000 * f ( -1.000000,  2.000000 )
   2    0.250000 * f (  1.000000,  2.000000 )
   3    0.500000 * f ( -1.000000,  2.500000 )
   4    0.500000 * f (  1.000000,  2.500000 )
   5    0.250000 * f ( -1.000000,  3.000000 )
   6    0.250000 * f (  1.000000,  3.000000 )
 
  A 3D rule over [-1,+1] x [2.0,3.0] x [10.0,15.0]:
 
   1    0.625000 * f ( -1.000000,  2.000000, 10.000000 )
   2    0.625000 * f (  1.000000,  2.000000, 10.000000 )
   3    1.250000 * f ( -1.000000,  2.500000, 10.000000 )
   4    1.250000 * f (  1.000000,  2.500000, 10.000000 )
   5    0.625000 * f ( -1.000000,  3.000000, 10.000000 )
   6    0.625000 * f (  1.000000,  3.000000, 10.000000 )
   7    0.625000 * f ( -1.000000,  2.000000, 15.000000 )
   8    0.625000 * f (  1.000000,  2.000000, 15.000000 )
   9    1.250000 * f ( -1.000000,  2.500000, 15.000000 )
  10    1.250000 * f (  1.000000,  2.500000, 15.000000 )
  11    0.625000 * f ( -1.000000,  3.000000, 15.000000 )
  12    0.625000 * f (  1.000000,  3.000000, 15.000000 )
 
TENSOR_PRODUCT_TEST_CELL:
  Given a set of 1D quadrature rules stored in a cell array,
  construct the tensor product rule.
 
  A 1D rule over [-1,+1]:
 
   1    1.000000 * f ( -1.000000 )
   2    1.000000 * f (  1.000000 )
 
  A 1D rule over [-1,+1]:
 
   1    0.250000 * f ( -1.000000,  2.000000 )
   2    0.250000 * f (  1.000000,  2.000000 )
   3    0.500000 * f ( -1.000000,  2.500000 )
   4    0.500000 * f (  1.000000,  2.500000 )
   5    0.250000 * f ( -1.000000,  3.000000 )
   6    0.250000 * f (  1.000000,  3.000000 )
 
  A 1D rule over [-1,+1]:
 
   1    0.625000 * f ( -1.000000,  2.000000, 10.000000 )
   2    0.625000 * f (  1.000000,  2.000000, 10.000000 )
   3    1.250000 * f ( -1.000000,  2.500000, 10.000000 )
   4    1.250000 * f (  1.000000,  2.500000, 10.000000 )
   5    0.625000 * f ( -1.000000,  3.000000, 10.000000 )
   6    0.625000 * f (  1.000000,  3.000000, 10.000000 )
   7    0.625000 * f ( -1.000000,  2.000000, 15.000000 )
   8    0.625000 * f (  1.000000,  2.000000, 15.000000 )
   9    1.250000 * f ( -1.000000,  2.500000, 15.000000 )
  10    1.250000 * f (  1.000000,  2.500000, 15.000000 )
  11    0.625000 * f ( -1.000000,  3.000000, 15.000000 )
  12    0.625000 * f (  1.000000,  3.000000, 15.000000 )
 
SPARSE_GRID_HW_PRB
  Normal end of execution.
 
 1 December 2012   4:16:27.850 PM
